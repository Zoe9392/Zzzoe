*******************************************   NOTES    *******************************************************
Encapsulation:
The current problems? (when building large problems/projects ; the enemy is complexity)
The COMPLEXITY[IMPORTANT for large projects]
Tools for managing the complexity ?
 ---> Hierarchical abstraction
    Creat layers of abstraction with clear abstraction barriers

 ---> "Design for changes"
    Organize problems around projects; HIDE INFORMATION others don't need; Objects decide how things are done

***** -------- *****
Modules and Encapsulation
Module: A set of methods that work together as a whole to perform some task or set of related tasks.
    A module is said to be ENCAPSULATED if its implementation is COMPLETELY HIDDEN, and it can be accessed only
  through a documented interface. E.g.: cell

Abstraction Barriers:
(Proj1B: Encapsulation, great for java)
Note the keywords: private, static, concerned with inheritance

***** --------- *****
Implementation inheritance Breaks Encapsulation:
example: Dog and Verbose Dog
*****----****
Type checking and Casting
Compile-Time Types and Expressions
***** -------******
Higher Order Functions
***********************************------------------------***********************************
implementation inheritance cheatsheet:
VengefulList extends SLList means a VengefulList is-an SLList. Inherits all members
---> Variables, methods, nested classes
---> Not constructors
---> Subclass constructor must invoke superclass constructor first
---> Use super to invoke overridden superclass methods and constructors

Invocation of overridden methods follow two simple rules:
---> Compiler plays it safe and only let us do things allowed by STATIC type
---> For overridden methods the actual method invoked is based on  DYNAMIC type of invoking expression
---> Can us casting to overrule compiler type checking

************************************---------------------------------------****************************
The Rules:
---> Compiler allows memory box to hold any subtype
---> Compiler allows calls based on static type
---> Overridden non-static methods are selected at run time based on dynamic type
    --> Everything else is based on static type , including overloaded methods.
*********************************************-----------------------------------***************************
The biggest idea: Subtype Polymorphism
polymorphism: "providing a single interface to entities of different types"
(Note: Subtype Polymorphism v.s. HoF)








